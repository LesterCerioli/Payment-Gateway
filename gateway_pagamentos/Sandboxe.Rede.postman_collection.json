{
	"info": {
		"_postman_id": "9d3f30ac-d89f-4ce1-ac7a-ed79c72b9111",
		"name": "Sandbox e.Rede",
		"description": "Coleção com os serviços disponíveis do E-Rede, para realizar vendas online.\n\n[Clique aqui](https://developer.userede.com.br/e-rede) para acessar a documentação completa.\n\nEsta coleção já contém variáveis, para visualiza-las clique no nome da coleção **Sandbox e.Rede** e selecione a aba `Variables`.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22861578"
	},
	"item": [
		{
			"name": "Transação",
			"item": [
				{
					"name": "Transação Autorização",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gerando valor randômico com data para a variável de ambiente {{reference}}",
									"var moment = require('moment');",
									"var reference = \"g\" + moment().format(\"DDMMYYHHmmssSSS\");",
									"pm.collectionVariables.set(\"reference\", reference);",
									"pm.environment.set(\"reference\", reference);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validando status code para uma transação aprovada",
									"pm.test(\"Validação do status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Se apresentar o campo tid na resposta, o mesmo será armazenado na variável de ambiente {{tid}}",
									"var response = JSON.parse(responseBody);",
									"if (response.tid !== undefined){",
									"    pm.environment.set(\"autorizacao_tid\", response.tid);",
									"    pm.collectionVariables.set(\"tid\", response.tid);",
									"    pm.collectionVariables.set(\"autorizacao_tid\", response.tid);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{pv}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"capture\": false,\n    \"kind\": \"credit\",\n    \"reference\": \"{{reference}}\",\n    \"amount\": {{autorizacao_amount}},\n    \"installments\": 2,\n    \"cardholderName\": \"John Snow\",\n    \"cardNumber\": \"5448280000000007\",\n    \"expirationMonth\": 1,\n    \"expirationYear\": 2028,\n    \"securityCode\": \"123\",\n    \"softDescriptor\": \"string\",\n    \"subscription\": false,\n    \"origin\": 1,\n    \"distributorAffiliation\": 0,\n    \"brandTid\": \"string\",\n    \"storageCard\": \"0\",\n    \"transactionCredentials\": {\n        \"credentialId\": \"01\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/transactions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"transactions"
							]
						},
						"description": "### Transação de Autorização\n\n> Para autenticar na API, utilize os dados de PV e Token gerados na criação do projeto na área logada do [Portal do Desenvolvedor](https://developer.userede.com.br/login).\n\n#### Autenticação\n\nÉ possível configurar a autenticação no Postman de 2 maneiras:\n\n*   **Opção 1:** Na aba `Authorization`, selecione o tipo \"Basic Auth\" e preencha os campos de Username e Password com PV e Token, respectivamente. **Este é o modo que está configurado na requisição.**\n*   **Opção 2:** Adicione na aba `Headers` da requisição o campo **Authorization** com o hash do PV e Token.  \n    Exemplo para gerar o hash do token na aba `Pre-request Script`:\n    \n    ```\n    var authBasicHash = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\n    pm.environment.set(\"hash_token\", \"Basic \" + authBasicHash);\n    \n    ```\n    \n\n#### Serviço\n\nCadastro da transação e-commerce. Está configurado no request uma transação de [**Autorização**](https://developer.userede.com.br/e-rede#captura)**.**\n\nA variável de ambiente {reference} no body da requisição está sendo preenchida na aba `Pre-request Script` com valor randômico utilizando data. Ademais, a variável da coleção {autorizacao_amount} contém o valor da requisição.\n\nAlém disso, na aba `Tests` está sendo feita a validação do status code da requisição realizada com sucesso e está sendo armazenado o valor do tid da resposta na váriavel {autorizacao_tid}.\n\n[Clique aqui](https://developer.userede.com.br/e-rede#swagger_operations-Transação-realizarTransacao) para acessar a documentação completa que apresenta os demais tipos de transação."
					},
					"response": []
				},
				{
					"name": "Confirmar autorização da transação (captura)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validando status code para uma requisição de sucesso, com tid e valor da transação corretos",
									"pm.test(\"Validação do status code\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{pv}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"amount\": {{autorizacao_amount}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/transactions/{{autorizacao_tid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"transactions",
								"{{autorizacao_tid}}"
							]
						},
						"description": "### Confirmar autorização da transação (captura)\n\n> Para autenticar na API, utilize os dados de PV e Token gerados na criação do projeto na área logada do [Portal do Desenvolvedor](https://developer.userede.com.br/login).\n\n#### Autenticação\n\nÉ possível configurar a autenticação no Postman de 2 maneiras:\n\n*   **Opção 1:** Na aba `Authorization`, selecione o tipo \"Basic Auth\" e preencha os campos de Username e Password com PV e Token, respectivamente. **Este é o modo que está configurado na requisição.**\n*   **Opção 2:** Adicione na aba `Headers` da requisição o campo **Authorization** com o hash do PV e Token.  \n    Exemplo para gerar o hash do token na aba `Pre-request Script`:\n    \n    ```\n    var authBasicHash = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\n    pm.environment.set(\"hash_token\", \"Basic \" + authBasicHash);\n    \n    ```\n    \n\n#### Serviço\n\nAo realizar uma autorização, é necessária a confirmação desta transação (captura).\n\n> Nesse momento é gerada a cobrança na fatura do portador do cartão.\n\nA variável de ambiente {autorizacao_tid} contém o ID da última transação feita na requsição **Transação Autorização** da pasta `Realizar transação`.\n\n[Clique aqui](https://developer.userede.com.br/e-rede#swagger_operations-Transação-confirmarAutorizacaoDaTransacaoCaptura) para acessar a documentação completa."
					},
					"response": []
				},
				{
					"name": "Transação Companhias Aéreas",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gerando valor randômico com data para a variável de ambiente {{reference}}",
									"var moment = require('moment');",
									"var reference = \"g\" + moment().format(\"DDMMYYHHmmssSSS\");",
									"pm.collectionVariables.set(\"reference\", reference);",
									"pm.environment.set(\"reference\", reference);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validando status code para uma transação aprovada",
									"pm.test(\"Validação do status code\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"// Se apresentar o campo tid na resposta, o mesmo será armazenado na variável de ambiente {{tid}}",
									"var response = JSON.parse(responseBody);",
									"if (response.tid !== undefined){",
									"  pm.environment.set(\"tid\", response.tid);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{pv}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"capture\": true,\n    \"reference\": \"{{reference}}\",\n    \"amount\": 2000,\n    \"cardholderName\": \"John Snow\",\n    \"cardNumber\": \"5448280000000007\",\n    \"expirationMonth\": 1,\n    \"expirationYear\": 2028,\n    \"securityCode\": \"123\",\n    \"iata\": {\n        \"code\": 101010,\n        \"departureTax\": 100\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/transactions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"transactions"
							]
						},
						"description": "### Transação Companhias Aéreas\n\n> Para autenticar na API, utilize os dados de PV e Token gerados na criação do projeto na área logada do [Portal do Desenvolvedor](https://developer.userede.com.br/login).\n\n#### Autenticação\n\nÉ possível configurar a autenticação no Postman de 2 maneiras:\n\n*   **Opção 1:** Na aba `Authorization`, selecione o tipo \"Basic Auth\" e preencha os campos de Username e Password com PV e Token, respectivamente. **Este é o modo que está configurado na requisição.**\n*   **Opção 2:** Adicione na aba `Headers` da requisição o campo **Authorization** com o hash do PV e Token.  \n    Exemplo para gerar o hash do token na aba `Pre-request Script`:\n    \n    ```\n    var authBasicHash = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\n    pm.environment.set(\"hash_token\", \"Basic \" + authBasicHash);\n    \n    ```\n    \n\n#### Serviço\n\nCadastro da transação e-commerce. Está configurado no request uma transação de [**Companhias Aéreas**](https://developer.userede.com.br/e-rede#companhias-aereas)**.**\n\nA variável de ambiente {reference} no body da requisição está sendo preenchida na aba `Pre-request Script` com valor randômico utilizando data.\n\nAlém disso, na aba `Tests` está sendo feita a validação do status code da requisição realizada com sucesso e está sendo armazenado o valor do tid da resposta na váriavel {tid}.\n\n[Clique aqui](https://developer.userede.com.br/e-rede#swagger_operations-Transação-realizarTransacao) para acessar a documentação completa que apresenta os demais tipos de transação."
					},
					"response": []
				},
				{
					"name": "Transação CBPS + Carteiras digitais",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gerando valor randômico com data para a variável de ambiente {{reference}}",
									"var moment = require('moment');",
									"var reference = \"g\" + moment().format(\"DDMMYYHHmmssSSS\");",
									"pm.collectionVariables.set(\"reference\", reference);",
									"pm.environment.set(\"reference\", reference);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validando status code para uma transação aprovada",
									"pm.test(\"Validação do status code\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"// Se apresentar o campo tid na resposta, o mesmo será armazenado na variável de ambiente {{tid}}",
									"var response = JSON.parse(responseBody);",
									"if (response.tid !== undefined){",
									"  pm.environment.set(\"tid\", response.tid);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{pv}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"capture\": \"true\",\n    \"kind\": \"credit\",\n    \"reference\": \"{{reference}}\",\n    \"amount\": 953,\n    \"cardNumber\": \"2223020000000005\",\n    \"expirationMonth\": 1,\n    \"expirationYear\": 2028,\n    \"softDescriptor\": \"LOJADOZE\",\n    \"paymentFacilitatorID\": 22349202212,\n    \"independentSalesOrganizationID\": 1234567,\n    \"subMerchant\": {\n        \"mcc\": \"1111\"\n    },\n    \"businessApplicationIdentifier\": \"01\",\n    \"consumerBillPaymentService\": {\n        \"businessApplicationIdentifier\": \"01\"\n    },\n    \"wallet\": {\n        \"walletId\": \"3900370000\",\n        \"processingType\": \"01\",\n        \"senderTaxIdentification\": \"12345678901\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/transactions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"transactions"
							]
						},
						"description": "### Transação CBPS + Carteiras digitais\n\n> Para autenticar na API, utilize os dados de PV e Token gerados na criação do projeto na área logada do [Portal do Desenvolvedor](https://developer.userede.com.br/login).\n\n#### Autenticação\n\nÉ possível configurar a autenticação no Postman de 2 maneiras:\n\n*   **Opção 1:** Na aba `Authorization`, selecione o tipo \"Basic Auth\" e preencha os campos de Username e Password com PV e Token, respectivamente. **Este é o modo que está configurado na requisição.**\n*   **Opção 2:** Adicione na aba `Headers` da requisição o campo **Authorization** com o hash do PV e Token.  \n    Exemplo para gerar o hash do token na aba `Pre-request Script`:\n    \n    ```\n    var authBasicHash = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\n    pm.environment.set(\"hash_token\", \"Basic \" + authBasicHash);\n    \n    ```\n    \n\n#### Serviço\n\nCadastro da transação e-commerce. Está configurado no request uma transação de [**CBPS + Carteiras digitais**](https://developer.userede.com.br/e-rede#cbps-carteiras-digitais)**.**\n\nA variável de ambiente {reference} do body da requisição está sendo preenchida na aba `Pre-request Script` com valor randômico utilizando data.\n\nAlém disso, na aba `Tests` está sendo feita a validação do status code da requisição realizada com sucesso e está sendo armazenado o valor do tid da resposta na váriavel {tid}.\n\n[Clique aqui](https://developer.userede.com.br/e-rede#swagger_operations-Transação-realizarTransacao) para acessar a documentação completa que apresenta os demais tipos de transação."
					},
					"response": []
				},
				{
					"name": "Transação CASH-IN + Carteiras digitais",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gerando valor randômico com data para a variável de ambiente {{reference}}",
									"var moment = require('moment');",
									"var reference = \"g\" + moment().format(\"DDMMYYHHmmssSSS\");",
									"pm.collectionVariables.set(\"reference\", reference);",
									"pm.environment.set(\"reference\", reference);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validando status code para uma transação aprovada",
									"pm.test(\"Validação do status code\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"// Se apresentar o campo tid na resposta, o mesmo será armazenado na variável de ambiente {{tid}}",
									"var response = JSON.parse(responseBody);",
									"if (response.tid !== undefined){",
									"  pm.environment.set(\"tid\", response.tid);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{pv}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"capture\": \"true\",\n    \"kind\": \"credit\",\n    \"reference\": \"{{reference}}\",\n    \"amount\": 953,\n    \"cardNumber\": \"4895370010000005\",\n    \"expirationMonth\": 1,\n    \"expirationYear\": 2028,\n    \"tokenCryptogram\": \"AgAAAAAAAIR8CQrXSohbQAAAAAA=\",\n    \"softDescriptor\": \"LOJADOZE\",\n    \"paymentFacilitatorID\": 22349202212,\n    \"independentSalesOrganizationID\": 1234567,\n    \"subMerchant\": {\n        \"mcc\": \"1111\"\n    },\n    \"businessApplicationIdentifier\": \"01\",\n    \"consumerBillPaymentService\": {\n        \"businessApplicationIdentifier\": \"02\"\n    },\n    \"wallet\": {\n        \"walletId\": \"3900370000\",\n        \"processingType\": \"02\",\n        \"senderTaxIdentification\": \"12345678901\"\n    },\n    \"securityAuthentication\": {\n        \"sai\": \"05\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/transactions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"transactions"
							]
						},
						"description": "### Transação CASH-IN + Carteiras digitais\n\n> Para autenticar na API, utilize os dados de PV e Token gerados na criação do projeto na área logada do [Portal do Desenvolvedor](https://developer.userede.com.br/login).\n\n#### Autenticação\n\nÉ possível configurar a autenticação no Postman de 2 maneiras:\n\n*   **Opção 1:** Na aba `Authorization`, selecione o tipo \"Basic Auth\" e preencha os campos de Username e Password com PV e Token, respectivamente. **Este é o modo que está configurado na requisição.**\n*   **Opção 2:** Adicione na aba `Headers` da requisição o campo **Authorization** com o hash do PV e Token.  \n    Exemplo para gerar o hash do token na aba `Pre-request Script`:\n    \n    ```\n    var authBasicHash = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\n    pm.environment.set(\"hash_token\", \"Basic \" + authBasicHash);\n    \n    ```\n    \n\n#### Serviço\n\nCadastro da transação e-commerce. Está configurado no request uma transação de [**CASH-IN + Carteiras digitais**](https://developer.userede.com.br/e-rede#cash-in-carteiras-digitais)**.**\n\nA variável de ambiente {reference} do body da requisição está sendo preenchida na aba `Pre-request Script` com valor randômico utilizando data.\n\nAlém disso, na aba `Tests` está sendo feita a validação do status code da requisição realizada com sucesso e está sendo armazenado o valor do tid da resposta na váriavel {tid}.\n\n[Clique aqui](https://developer.userede.com.br/e-rede#swagger_operations-Transação-realizarTransacao) para acessar a documentação completa que apresenta os demais tipos de transação."
					},
					"response": []
				},
				{
					"name": "Transação PURCHASE + Carteiras digitais",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gerando valor randômico com data para a variável de ambiente {{reference}}",
									"var moment = require('moment');",
									"var reference = \"g\" + moment().format(\"DDMMYYHHmmssSSS\");",
									"pm.collectionVariables.set(\"reference\", reference);",
									"pm.environment.set(\"reference\", reference);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validando status code para uma transação aprovada",
									"pm.test(\"Validação do status code\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"// Se apresentar o campo tid na resposta, o mesmo será armazenado na variável de ambiente {{tid}}",
									"var response = JSON.parse(responseBody);",
									"if (response.tid !== undefined){",
									"  pm.environment.set(\"tid\", response.tid);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{pv}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"capture\": \"true\",\n    \"kind\": \"credit\",\n    \"reference\": \"{{reference}}\",\n    \"amount\": 953,\n    \"cardNumber\": \"2223000250000004\",\n    \"expirationMonth\": 1,\n    \"expirationYear\": 2028,\n    \"tokenCryptogram\": \"ANbuvvxnDbK2AAEShHMWGgADFA==\",\n    \"softDescriptor\": \"LOJADOZE\",\n    \"paymentFacilitatorID\": 22349202212,\n    \"independentSalesOrganizationID\": 1234567,\n    \"subMerchant\": {\n        \"mcc\": \"1111\"\n    },\n    \"businessApplicationIdentifier\": \"01\",\n    \"consumerBillPaymentService\": {\n        \"businessApplicationIdentifier\": \"01\"\n    },\n    \"wallet\": {\n        \"walletId\": \"3900370000\",\n        \"processingType\": \"01\",\n        \"senderTaxIdentification\": \"12345678901\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/transactions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"transactions"
							]
						},
						"description": "### Transação PURCHASE + Carteiras digitais\n\n> Para autenticar na API, utilize os dados de PV e Token gerados na criação do projeto na área logada do [Portal do Desenvolvedor](https://developer.userede.com.br/login).\n\n#### Autenticação\n\nÉ possível configurar a autenticação no Postman de 2 maneiras:\n\n*   **Opção 1:** Na aba `Authorization`, selecione o tipo \"Basic Auth\" e preencha os campos de Username e Password com PV e Token, respectivamente. **Este é o modo que está configurado na requisição.**\n*   **Opção 2:** Adicione na aba `Headers` da requisição o campo **Authorization** com o hash do PV e Token.  \n    Exemplo para gerar o hash do token na aba `Pre-request Script`:\n    \n    ```\n    var authBasicHash = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\n    pm.environment.set(\"hash_token\", \"Basic \" + authBasicHash);\n    \n    ```\n    \n\n#### Serviço\n\nCadastro da transação e-commerce. Está configurado no request uma transação de [**PURCHASE + Carteiras digitais**](https://developer.userede.com.br/e-rede#purchase-carteiras-digitais)**.**\n\nA variável de ambiente {reference} do body da requisição está sendo preenchida na aba `Pre-request Script` com valor randômico utilizando data.\n\nAlém disso, na aba `Tests` está sendo feita a validação do status code da requisição realizada com sucesso e está sendo armazenado o valor do tid da resposta na váriavel {tid}.\n\n[Clique aqui](https://developer.userede.com.br/e-rede#swagger_operations-Transação-realizarTransacao) para acessar a documentação completa que apresenta os demais tipos de transação."
					},
					"response": []
				},
				{
					"name": "Transação 3D Secure 2.0: MPI Rede",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gerando valor randômico com data para a variável de ambiente {{reference}}",
									"var moment = require('moment');",
									"var reference = \"g\" + moment().format(\"DDMMYYHHmmssSSS\");",
									"pm.collectionVariables.set(\"reference\", reference);",
									"pm.environment.set(\"reference\", reference);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validando status code para uma transação aprovada",
									"pm.test(\"Validação do status code\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"// Se apresentar o campo tid na resposta, o mesmo será armazenado na variável de ambiente {{tid}}",
									"var response = JSON.parse(responseBody);",
									"if (response.tid !== undefined){",
									"  pm.environment.set(\"tid\", response.tid);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{pv}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"capture\": false,\n    \"reference\": \"{{reference}}\",\n    \"amount\": 2000,\n    \"cardholderName\": \"John Snow\",\n    \"cardNumber\": \"5448280000000007\",\n    \"expirationMonth\": 1,\n    \"expirationYear\": 2028,\n    \"securityCode\": \"123\",\n    \"kind\": \"credit\",\n    \"threeDSecure\": {\n        \"embedded\": true,\n        \"onFailure\": \"continue\",\n        \"userAgent\": \"Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Mobile/7B405\",\n        \"device\": {\n            \"colorDepth\": 1,\n            \"deviceType3ds\": \"BROWSER\",\n            \"javaEnabled\": false,\n            \"language\": \"BR\",\n            \"screenHeight\": 500,\n            \"screenWidth\": 500,\n            \"timeZoneOffset\": 3\n        }\n    },\n    \"urls\": [\n        {\n            \"kind\": \"threeDSecureSuccess\",\n            \"url\": \"https://scommerce.userede.com.br/LojaTeste/Venda/sucesso\"\n        },\n        {\n            \"kind\": \"threeDSecureFailure\",\n            \"url\": \"https://scommerce.userede.com.br/LojaTeste/Venda/erro\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/transactions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"transactions"
							]
						},
						"description": "### Transação 3D Secure 2.0: MPI Rede\n\n> Para autenticar na API, utilize os dados de PV e Token gerados na criação do projeto na área logada do [Portal do Desenvolvedor](https://developer.userede.com.br/login).\n\n#### Autenticação\n\nÉ possível configurar a autenticação no Postman de 2 maneiras:\n\n*   **Opção 1:** Na aba `Authorization`, selecione o tipo \"Basic Auth\" e preencha os campos de Username e Password com PV e Token, respectivamente. **Este é o modo que está configurado na requisição.**\n*   **Opção 2:** Adicione na aba `Headers` da requisição o campo **Authorization** com o hash do PV e Token.  \n    Exemplo para gerar o hash do token na aba `Pre-request Script`:\n    \n    ```\n    var authBasicHash = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\n    pm.environment.set(\"hash_token\", \"Basic \" + authBasicHash);\n    \n    ```\n    \n\n#### Serviço\n\nCadastro da transação e-commerce. Está configurado no request uma transação de [3D Secure 2.0: MPI Rede](https://developer.userede.com.br/e-rede#3d-secure2-0-mpi-rede)**.**\n\nA variável de ambiente {reference} do body da requisição está sendo preenchida na aba `Pre-request Script` com valor randômico utilizando data.\n\nAlém disso, na aba `Tests` está sendo feito a validação do status code da requisição realizada com sucesso e está sendo armazenado o valor do tid da resposta na váriavel {tid}.\n\n[Clique aqui](https://developer.userede.com.br/e-rede#swagger_operations-Transação-realizarTransacao) para acessar a documentação completa que apresenta os demais tipos de transação."
					},
					"response": []
				},
				{
					"name": "Transação 3D Secure 2.0: MPI Cliente",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gerando valor randômico com data para a variável de ambiente {{reference}}",
									"var moment = require('moment');",
									"var reference = \"g\" + moment().format(\"DDMMYYHHmmssSSS\");",
									"pm.collectionVariables.set(\"reference\", reference);",
									"pm.environment.set(\"reference\", reference);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validando status code para uma transação aprovada",
									"pm.test(\"Validação do status code\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"// Se apresentar o campo tid na resposta, o mesmo será armazenado na variável de ambiente {{tid}}",
									"var response = JSON.parse(responseBody);",
									"if (response.tid !== undefined){",
									"  pm.environment.set(\"tid\", response.tid);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{pv}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reference\": \"{{reference}}\",\n    \"amount\": 2000,\n    \"cardholderName\": \"John Snow\",\n    \"cardNumber\": \"2223020000000005\",\n    \"expirationMonth\": 1,\n    \"expirationYear\": 2028,\n    \"securityCode\": \"123\",\n    \"kind\": \"credit\",\n    \"threeDSecure\": {\n        \"embedded\": false,\n        \"cavv\": \"BwABBylVaQAAAAFwllVpAAAAAAA=\",\n        \"eci\": \"05\",\n        \"xid\": \"Nmp3VFdWMlEwZ05pWGN3SGo4TDA=\",\n        \"threeDIndicator\": \"2\",\n        \"directoryServerTransactionId\": \"f38e6948-5388-41a6-bca4-b49723c19437\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/transactions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"transactions"
							]
						},
						"description": "### Transação 3D Secure 2.0: MPI Cliente\n\n> Para autenticar na API, utilize os dados de PV e Token gerados na criação do projeto na área logada do [Portal do Desenvolvedor](https://developer.userede.com.br/login).\n\n#### Autenticação\n\nÉ possível configurar a autenticação no Postman de 2 maneiras:\n\n*   **Opção 1:** Na aba `Authorization`, selecione o tipo \"Basic Auth\" e preencha os campos de Username e Password com PV e Token, respectivamente. **Este é o modo que está configurado na requisição.**\n*   **Opção 2:** Adicione na aba `Headers` da requisição o campo **Authorization** com o hash do PV e Token.  \n    Exemplo para gerar o hash do token na aba `Pre-request Script`:\n    \n    ```\n    var authBasicHash = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\n    pm.environment.set(\"hash_token\", \"Basic \" + authBasicHash);\n    \n    ```\n    \n\n#### Serviço\n\nCadastro da transação e-commerce. Está configurado no request uma transação de [**3D Secure 2.0: MPI Cliente**](https://developer.userede.com.br/e-rede#3d-secure-cliente)**.**\n\nA variável de ambiente {reference} do body da requisição está sendo preenchida na aba `Pre-request Script` com valor randômico utilizando data.\n\nAlém disso, na aba `Tests` está sendo feito a validação do status code da requisição realizada com sucesso e está sendo armazenado o valor do tid da resposta na váriavel {tid}.\n\n[Clique aqui](https://developer.userede.com.br/e-rede#swagger_operations-Transação-realizarTransacao) para acessar a documentação completa que apresenta os demais tipos de transação."
					},
					"response": []
				},
				{
					"name": "Transação 3D Secure 2.0: Data Only MPI Rede",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gerando valor randômico com data para a variável de ambiente {{reference}}",
									"var moment = require('moment');",
									"var reference = \"g\" + moment().format(\"DDMMYYHHmmssSSS\");",
									"pm.collectionVariables.set(\"reference\", reference);",
									"pm.environment.set(\"reference\", reference);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validando status code para uma transação aprovada",
									"pm.test(\"Validação do status code\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"// Se apresentar o campo tid na resposta, o mesmo será armazenado na variável de ambiente {{tid}}",
									"var response = JSON.parse(responseBody);",
									"if (response.tid !== undefined){",
									"  pm.environment.set(\"tid\", response.tid);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{pv}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"capture\": false,\n    \"reference\": \"{{reference}}\",\n    \"amount\": 2000,\n    \"cardholderName\": \"John Snow\",\n    \"cardNumber\": \"5448280000000007\",\n    \"expirationMonth\": 1,\n    \"expirationYear\": 2028,\n    \"securityCode\": \"123\",\n    \"kind\": \"credit\",\n    \"threeDSecure\": {\n        \"embedded\": true,\n        \"onFailure\": \"continue\",\n        \"userAgent\": \"Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Mobile/7B405\",\n        \"device\": {\n            \"colorDepth\": 1,\n            \"deviceType3ds\": \"BROWSER\",\n            \"javaEnabled\": false,\n            \"language\": \"BR\",\n            \"screenHeight\": 500,\n            \"screenWidth\": 500,\n            \"timeZoneOffset\": 3\n        },\n        \"challengePreference\": \"DATA_ONLY\"\n    },\n    \"urls\": [\n        {\n            \"kind\": \"threeDSecureSuccess\",\n            \"url\": \"https://scommerce.userede.com.br/LojaTeste/Venda/sucesso\"\n        },\n        {\n            \"kind\": \"threeDSecureFailure\",\n            \"url\": \"https://scommerce.userede.com.br/LojaTeste/Venda/erro\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/transactions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"transactions"
							]
						},
						"description": "### Transação 3D Secure 2.0: Data Only MPI Rede\n\n> Para autenticar na API, utilize os dados de PV e Token gerados na criação do projeto na área logada do [Portal do Desenvolvedor](https://developer.userede.com.br/login).\n\n#### Autenticação\n\nÉ possível configurar a autenticação no Postman de 2 maneiras:\n\n*   **Opção 1:** Na aba `Authorization`, selecione o tipo \"Basic Auth\" e preencha os campos de Username e Password com PV e Token, respectivamente. **Este é o modo que está configurado na requisição.**\n*   **Opção 2:** Adicione na aba `Headers` da requisição o campo **Authorization** com o hash do PV e Token.  \n    Exemplo para gerar o hash do token na aba `Pre-request Script`:\n    \n    ```\n    var authBasicHash = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\n    pm.environment.set(\"hash_token\", \"Basic \" + authBasicHash);\n    \n    ```\n    \n\n#### Serviço\n\nCadastro da transação e-commerce. Está configurado no request uma transação de [3D Secure 2.0: Data Only MPI Rede](https://developer.userede.com.br/e-rede#data-only-mpi-rede)**.**\n\nA variável de ambiente {reference} do body da requisição está sendo preenchida na aba `Pre-request Script` com valor randômico utilizando data.\n\nAlém disso, na aba `Tests` está sendo feito a validação do status code da requisição realizada com sucesso e está sendo armazenado o valor do tid da resposta na váriavel {tid}.\n\n[Clique aqui](https://developer.userede.com.br/e-rede#swagger_operations-Transação-realizarTransacao) para acessar a documentação completa que apresenta os demais tipos de transação."
					},
					"response": []
				},
				{
					"name": "Transação 3D Secure 2.0: Data Only MPI Cliente",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gerando valor randômico com data para a variável de ambiente {{reference}}",
									"var moment = require('moment');",
									"var reference = \"g\" + moment().format(\"DDMMYYHHmmssSSS\");",
									"pm.collectionVariables.set(\"reference\", reference);",
									"pm.environment.set(\"reference\", reference);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validando status code para uma transação aprovada",
									"pm.test(\"Validação do status code\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"// Se apresentar o campo tid na resposta, o mesmo será armazenado na variável de ambiente {{tid}}",
									"var response = JSON.parse(responseBody);",
									"if (response.tid !== undefined){",
									"  pm.environment.set(\"tid\", response.tid);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{pv}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reference\": \"{{reference}}\",\n    \"amount\": 2000,\n    \"cardholderName\": \"John Snow\",\n    \"cardNumber\": \"5448280000000007\",\n    \"expirationMonth\": 1,\n    \"expirationYear\": 2028,\n    \"securityCode\": \"123\",\n    \"kind\": \"credit\",\n    \"threeDSecure\": {\n        \"embedded\": false,\n        \"cavv\": \"BwABBylVaQAAAAFwllVpAAAAAAA=\",\n        \"eci\": \"04\",\n        \"threeDIndicator\": \"2\",\n        \"directoryServerTransactionId\": \"f38e6948-5388-41a6-bca4-b49723c19437\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/transactions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"transactions"
							]
						},
						"description": "### Transação 3D Secure 2.0: Data Only MPI Cliente\n\n> Para autenticar na API, utilize os dados de PV e Token gerados na criação do projeto na área logada do [Portal do Desenvolvedor](https://developer.userede.com.br/login).\n\n#### Autenticação\n\nÉ possível configurar a autenticação no Postman de 2 maneiras:\n\n*   **Opção 1:** Na aba `Authorization`, selecione o tipo \"Basic Auth\" e preencha os campos de Username e Password com PV e Token, respectivamente. **Este é o modo que está configurado na requisição.**\n*   **Opção 2:** Adicione na aba `Headers` da requisição o campo **Authorization** com o hash do PV e Token.  \n    Exemplo para gerar o hash do token na aba `Pre-request Script`:\n    \n    ```\n    var authBasicHash = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\n    pm.environment.set(\"hash_token\", \"Basic \" + authBasicHash);\n    \n    ```\n    \n\n#### Serviço\n\nCadastro da transação e-commerce. Está configurado no request uma transação de [3D Secure 2.0: Data Only MPI Cliente](https://developer.userede.com.br/e-rede#data-only-mpi-cliente)**.**\n\nA variável de ambiente {reference} do body da requisição está sendo preenchida na aba `Pre-request Script` com valor randômico utilizando data.\n\nAlém disso, na aba `Tests` está sendo feito a validação do status code da requisição realizada com sucesso e está sendo armazenado o valor do tid da resposta na váriavel {tid}.\n\n[Clique aqui](https://developer.userede.com.br/e-rede#swagger_operations-Transação-realizarTransacao) para acessar a documentação completa que apresenta os demais tipos de transação."
					},
					"response": []
				},
				{
					"name": "Transação Zero dollar",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gerando valor randômico com data para a variável de ambiente {{reference}}",
									"var moment = require('moment');",
									"var reference = \"g\" + moment().format(\"DDMMYYHHmmssSSS\");",
									"pm.collectionVariables.set(\"reference\", reference);",
									"pm.environment.set(\"reference\", reference);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validando status code para uma transação aprovada",
									"pm.test(\"Validação do status code\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"// Se apresentar o campo tid na resposta, o mesmo será armazenado na variável de ambiente {{tid}}",
									"var response = JSON.parse(responseBody);",
									"if (response.tid !== undefined){",
									"  pm.environment.set(\"tid\", response.tid);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{pv}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"capture\": true,\n    \"kind\": \"credit\",\n    \"reference\": \"{{reference}}\",\n    \"amount\": 0,\n    \"cardholderName\": \"John Snow\",\n    \"cardNumber\": \"2223020000000005\",\n    \"expirationMonth\": 1,\n    \"expirationYear\": 2028,\n    \"securityCode\": \"123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/transactions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"transactions"
							]
						},
						"description": "### Transação Zero dollar\n\n> Para autenticar na API, utilize os dados de PV e Token gerados na criação do projeto na área logada do [Portal do Desenvolvedor](https://developer.userede.com.br/login).\n\n#### Autenticação\n\nÉ possível configurar a autenticação no Postman de 2 maneiras:\n\n*   **Opção 1:** Na aba `Authorization`, selecione o tipo \"Basic Auth\" e preencha os campos de Username e Password com PV e Token, respectivamente. **Este é o modo que está configurado na requisição.**\n*   **Opção 2:** Adicione na aba `Headers` da requisição o campo **Authorization** com o hash do PV e Token.  \n    Exemplo para gerar o hash do token na aba `Pre-request Script`:\n    \n    ```\n    var authBasicHash = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\n    pm.environment.set(\"hash_token\", \"Basic \" + authBasicHash);\n    \n    ```\n    \n\n#### Serviço\n\nCadastro da transação e-commerce. Está configurado no request uma transação [**Zero dollar**](https://developer.userede.com.br/e-rede#zero-dollar)**.**\n\nA variável de ambiente {reference} do body da requisição está sendo preenchida na aba `Pre-request Script` com valor randômico utilizando data.\n\nAlém disso, na aba `Tests` está sendo feita a validação do status code da requisição realizada com sucesso e está sendo armazenado o valor do tid da resposta na váriavel {tid}.\n\n[Clique aqui](https://developer.userede.com.br/e-rede#swagger_operations-Transação-realizarTransacao) para acessar a documentação completa que apresenta os demais tipos de transação."
					},
					"response": []
				},
				{
					"name": "Consultar transação por tid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validando status code para uma requisição de sucesso, com tid válido",
									"pm.test(\"Validação do status code\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{pv}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Transaction-Response",
								"value": "brand-return-opened",
								"type": "string"
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/transactions/{{tid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"transactions",
								"{{tid}}"
							]
						},
						"description": "### Consultar transação por TID\n\n> Para autenticar na API, utilize os dados de PV e Token gerados na criação do projeto na área logada do [Portal do Desenvolvedor](https://developer.userede.com.br/login).\n\n#### Autenticação\n\nÉ possível configurar a autenticação no Postman de 2 maneiras:\n\n*   **Opção 1:** Na aba `Authorization`, selecione o tipo \"Basic Auth\" e preencha os campos de Username e Password com PV e Token, respectivamente. **Este é o modo que está configurado na requisição.**\n*   **Opção 2:** Adicione na aba `Headers` da requisição o campo **Authorization** com o hash do PV e Token.  \n    Exemplo para gerar o hash do token na aba `Pre-request Script`:\n    \n    ```\n    var authBasicHash = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\n    pm.environment.set(\"hash_token\", \"Basic \" + authBasicHash);\n    \n    ```\n\n    \n\n#### Serviço\n\n[Consulta da transação a partir do TID](https://developer.userede.com.br/e-rede#consulta-transacao) que é gerado em cada transação.\n\nA variável de ambiente {tid} contém o ID da última transação feita em uma das requisições da pasta `Realizar transação`, desta forma a consulta das vendas fica mais simples.\n\n> O prazo para consulta de pré autorizações pendentes e transações de zero dollar é de 60 dias. Após esse prazo o status da consulta retornará como: **not found**.\n\nNa aba `Tests` está sendo feita a validação do status code da requisição realizada com sucesso.\n\n[Clique aqui](https://developer.userede.com.br/e-rede) para acessar a documentação completa."
					},
					"response": []
				},
				{
					"name": "Consultar transação por reference",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validando status code para uma requisição de sucesso, com reference válido",
									"pm.test(\"Validação do status code\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"// Se apresentar o campo tid na resposta, o mesmo será armazenado na variável de ambiente {{tid}}",
									"var response = JSON.parse(responseBody);",
									"if (response.tid !== undefined){",
									"  pm.environment.set(\"tid\", response.tid);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{pv}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Transaction-Response",
								"value": "brand-return-opened",
								"type": "string"
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/transactions?reference={{reference}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"transactions"
							],
							"query": [
								{
									"key": "reference",
									"value": "{{reference}}",
									"description": "Número do pedido gerado pelo estabelecimento."
								}
							]
						},
						"description": "### Consultar transação por reference\n\n> Para autenticar na API, utilize os dados de PV e Token gerados na criação do projeto na área logada do [Portal do Desenvolvedor](https://developer.userede.com.br/login).\n\n#### Autenticação\n\nÉ possível configurar a autenticação no Postman de 2 maneiras:\n\n*   **Opção 1:** Na aba `Authorization`, selecione o tipo \"Basic Auth\" e preencha os campos de Username e Password com PV e Token, respectivamente. **Este é o modo que está configurado na requisição.**\n*   **Opção 2:** Adicione na aba `Headers` da requisição o campo **Authorization** com o hash do PV e Token.  \n    Exemplo para gerar o hash do token na aba `Pre-request Script`:\n    \n    ```\n    var authBasicHash = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\n    pm.environment.set(\"hash_token\", \"Basic \" + authBasicHash);\n    \n    ```\n    \n\n#### Serviço\n\n[Consulta da transação](https://developer.userede.com.br/e-rede#consulta-transacao) a partir do número do pedido criado pelo estabelecimento (reference).\n\n> O prazo para consulta de pré autorizações pendentes e transações de zero dollar é de 60 dias. Após esse prazo o status da consulta retornará como: **not found**.\n\nA variável de ambiente {reference} contém o número de pedido da última transação feita em uma das requisições da pasta **`Realizar transação`**, desta forma a consulta das vendas fica mais simples.\n\nNa aba `Tests` além de fazer a validação do status code da requisição realizada com sucesso, está sendo armazenado o valor do tid da resposta do serviço na variável de ambiente {{id}.\n\n[Clique aqui](https://developer.userede.com.br/e-rede#swagger_operations-Transação-consultarTransacaoPorReference) para acessar a documentação completa."
					},
					"response": []
				},
				{
					"name": "Transação MCC dinâmico",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gerando valor randômico com data para a variável de ambiente {{reference}}",
									"var moment = require('moment');",
									"var reference = \"g\" + moment().format(\"DDMMYYHHmmssSSS\");",
									"pm.collectionVariables.set(\"reference\", reference);",
									"pm.environment.set(\"reference\", reference);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validando status code para uma transação aprovada",
									"pm.test(\"Validação do status code\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"// Se apresentar o campo tid na resposta, o mesmo será armazenado na variável de ambiente {{tid}}",
									"var response = JSON.parse(responseBody);",
									"if (response.tid !== undefined){",
									"  pm.environment.set(\"tid\", response.tid);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{pv}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reference\": \"{{reference}}\",\n    \"amount\": 2000,\n    \"cardholderName\": \"John Snow\",\n    \"cardNumber\": \"6370950847866501\",\n    \"expirationMonth\": 1,\n    \"expirationYear\": 2028,\n    \"securityCode\": \"123\",\n    \"softDescriptor\": \"LOJADOZE\",\n    \"paymentFacilitatorID\": 22349202212,\n    \"independentSalesOrganizationID\": 1234567,\n    \"subMerchant\": {\n        \"mcc\": \"1111\",\n        \"subMerchantID\": 1234567890,\n        \"address\": \"Rua Acre\",\n        \"city\": \"CAPIVARI\",\n        \"state\": \"SP\",\n        \"country\": \"BRA\",\n        \"cep\": \"07064-010\",\n        \"cnpj\": \"71.789.371/0001-42\",\n        \"taxIdNumber\": \"99999999999\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/transactions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"transactions"
							]
						},
						"description": "### Transação MCC dinâmico\n\n> Para autenticar na API, utilize os dados de PV e Token gerados na criação do projeto na área logada do [Portal do Desenvolvedor](https://developer.userede.com.br/login).\n\n#### Autenticação\n\nÉ possível configurar a autenticação no Postman de 2 maneiras:\n\n*   **Opção 1:** Na aba `Authorization`, selecione o tipo \"Basic Auth\" e preencha os campos de Username e Password com PV e Token, respectivamente. **Este é o modo que está configurado na requisição.**\n*   **Opção 2:** Adicione na aba `Headers` da requisição o campo **Authorization** com o hash do PV e Token.  \n    Exemplo para gerar o hash do token na aba `Pre-request Script`:\n    \n    ```\n    var authBasicHash = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\n    pm.environment.set(\"hash_token\", \"Basic \" + authBasicHash);\n    \n    ```\n    \n\n#### Serviço\n\nCadastro da transação e-commerce. Está configurado no request uma transação de [**MCC dinâmico**](https://developer.userede.com.br/e-rede#mcc-dinamico)**.**\n\nA variável de ambiente {reference} do body da requisição está sendo preenchida na aba `Pre-request Script` com valor randômico utilizando data.\n\nAlém disso, na aba `Tests` está sendo feita a validação do status code da requisição realizada com sucesso e está sendo armazenado o valor do tid da resposta na váriavel {tid}.\n\n[Clique aqui](https://developer.userede.com.br/e-rede#swagger_operations-Transação-realizarTransacao) para acessar a documentação completa que apresenta os demais tipos de transação."
					},
					"response": []
				},
				{
					"name": "Transação Carteiras digitais: Apple, Google e Samsung pay",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gerando valor randômico com data para a variável de ambiente {{reference}}",
									"var moment = require('moment');",
									"var reference = \"g\" + moment().format(\"DDMMYYHHmmssSSS\");",
									"pm.collectionVariables.set(\"reference\", reference);",
									"pm.environment.set(\"reference\", reference);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validando status code para uma transação aprovada",
									"pm.test(\"Validação do status code\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"// Se apresentar o campo tid na resposta, o mesmo será armazenado na variável de ambiente {{tid}}",
									"var response = JSON.parse(responseBody);",
									"if (response.tid !== undefined){",
									"  pm.environment.set(\"tid\", response.tid);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{pv}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"capture\": \"true\",\n    \"kind\": \"credit\",\n    \"reference\": \"{{reference}}\",\n    \"amount\": 2000,\n    \"cardholderName\": \"Jon Snow\",\n    \"cardNumber\": \"2223000250000004\",\n    \"expirationMonth\": 1,\n    \"expirationYear\": 2028,\n    \"securityCode\": \"235\",\n    \"origin\": 4,\n    \"storageCard\": \"1\",\n    \"tokenCryptogram\": \"ANbuvvxnDbK2AAEShHMWGgADFA==\",\n    \"wallet\": {\n        \"walletId\": \"52894351835\",\n        \"processingType\": \"04\",\n        \"walletCode\": \"GEP\"\n    },\n    \"securityAuthentication\": {\n        \"sai\": \"05\"\n    },\n    \"transactionCredentials\": {\n        \"credentialId\": \"01\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/transactions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"transactions"
							]
						},
						"description": "### Transação Carteiras digitais: Apple, Google e Samsung pay\n\n> Para autenticar na API, utilize os dados de PV e Token gerados na criação do projeto na área logada do [Portal do Desenvolvedor](https://developer.userede.com.br/login).\n\n#### Autenticação\n\nÉ possível configurar a autenticação no Postman de 2 maneiras:\n\n*   **Opção 1:** Na aba `Authorization`, selecione o tipo \"Basic Auth\" e preencha os campos de Username e Password com PV e Token, respectivamente. **Este é o modo que está configurado na requisição.**\n*   **Opção 2:** Adicione na aba `Headers` da requisição o campo **Authorization** com o hash do PV e Token.  \n    Exemplo para gerar o hash do token na aba `Pre-request Script`:\n    \n    ```\n    var authBasicHash = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\n    pm.environment.set(\"hash_token\", \"Basic \" + authBasicHash);\n    \n    ```\n    \n\n#### Serviço\n\nCadastro da transação e-commerce. Está configurado no request uma transação de [**Carteiras digitais: Apple, Google e Samsung pay**](https://developer.userede.com.br/e-rede#carteiras-digitais-apple-google-samsung-pay)**.**\n\nA variável de ambiente {reference} do body da requisição está sendo preenchida na aba `Pre-request Script` com valor randômico utilizando data.\n\nAlém disso, na aba `Tests` está sendo feita a validação do status code da requisição realizada com sucesso.\n\n[Clique aqui](https://developer.userede.com.br/e-rede#swagger_operations-Transação-realizarTransacao) para acessar a documentação completa que apresenta os demais tipos de transação."
					},
					"response": []
				},
				{
					"name": "Transação Tokenização de bandeiras",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gerando valor randômico com data para a variável de ambiente {{reference}}",
									"var moment = require('moment');",
									"var reference = \"g\" + moment().format(\"DDMMYYHHmmssSSS\");",
									"pm.collectionVariables.set(\"reference\", reference);",
									"pm.environment.set(\"reference\", reference);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validando status code para uma transação aprovada",
									"pm.test(\"Validação do status code\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"// Se apresentar o campo tid na resposta, o mesmo será armazenado na variável de ambiente {{tid}}",
									"var response = JSON.parse(responseBody);",
									"if (response.tid !== undefined){",
									"  pm.environment.set(\"tid\", response.tid);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{pv}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"capture\": true,\n    \"kind\": \"credit\",\n    \"reference\": \"{{reference}}\",\n    \"amount\": 2000,\n    \"cardholderName\": \"John Snow\",\n    \"cardNumber\": \"2223000250000004\",\n    \"expirationMonth\": 1,\n    \"expirationYear\": 2028,\n    \"securityCode\": \"123\",\n    \"tokenCryptogram\": \"ANbuvvxnDbK2AAEShHMWGgADFA==\",\n    \"storageCard\": \"1\",\n     \"securityAuthentication\": {\n        \"sai\": \"05\"\n    },\n    \"transactionCredentials\": {\n        \"credentialId\": \"01\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/transactions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"transactions"
							]
						},
						"description": "### Transação Tokenização de bandeiras\n\n> Para autenticar na API, utilize os dados de PV e Token gerados na criação do projeto na área logada do [Portal do Desenvolvedor](https://developer.userede.com.br/login).\n\n#### Autenticação\n\nÉ possível configurar a autenticação no Postman de 2 maneiras:\n\n*   **Opção 1:** Na aba `Authorization`, selecione o tipo \"Basic Auth\" e preencha os campos de Username e Password com PV e Token, respectivamente. **Este é o modo que está configurado na requisição.**\n*   **Opção 2:** Adicione na aba `Headers` da requisição o campo **Authorization** com o hash do PV e Token.  \n    Exemplo para gerar o hash do token na aba `Pre-request Script`:\n    \n    ```\n    var authBasicHash = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\n    pm.environment.set(\"hash_token\", \"Basic \" + authBasicHash);\n    \n    ```\n    \n\n#### Serviço\n\nCadastro da transação e-commerce. Está configurado no request uma transação de [**Tokenização de bandeiras**](https://developer.userede.com.br/e-rede#tokenizacao-bandeiras)**.**\n\nA variável de ambiente {reference} do body da requisição está sendo preenchida na aba `Pre-request Script` com valor randômico utilizando data.\n\nAlém disso, na aba `Tests` está sendo feita a validação do status code da requisição realizada com sucesso e está sendo armazenado o valor do tid da resposta na váriavel {tid}.\n\n[Clique aqui](https://developer.userede.com.br/e-rede#swagger_operations-Transação-realizarTransacao) para acessar a documentação completa que apresenta os demais tipos de transação."
					},
					"response": []
				}
			]
		},
		{
			"name": "Cancelamento",
			"item": [
				{
					"name": "Cancelar transação",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gerando valor randômico com data para a variável de ambiente {{reference}}",
									"var moment = require('moment');",
									"var reference = \"g\" + moment().format(\"DDMMYYHHmmssSSS\");",
									"",
									"// Realizar transação para depois ter o tid para cancelar",
									"var haveToCreateTransaction = true; //pm.environment.get",
									"if (haveToCreateTransaction){",
									"    var hashToken = \"Basic \" + btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));",
									"    createTransaction(hashToken);",
									"}",
									"",
									"// função para cadastrar transação do tipo MCC Dinânmico",
									"function createTransaction (hashToken) {",
									"    var authBasicHash = hashToken;",
									"    pm.sendRequest({",
									"        url: pm.environment.get(\"base_url\") + '/v1/transactions',",
									"        method: 'POST',",
									"        header: {",
									"        'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': authBasicHash",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({",
									"                        reference: reference,",
									"                        amount: 2000,",
									"                        cardholderName: 'John Snow',",
									"                        cardNumber: '2223020000000005',",
									"                        expirationMonth: 1,",
									"                        expirationYear: 2028,",
									"                        securityCode: '123',",
									"                        threeDSecure: {",
									"                            embedded: false,",
									"                            cavv: 'BwABBylVaQAAAAFwllVpAAAAAAA=',",
									"                            eci: '05',",
									"                            xid: 'Nmp3VFdWMlEwZ05pWGN3SGo4TDA=',",
									"                            threeDIndicator: '2'",
									"                        }",
									"                    })                 ",
									"        }",
									"       }, function (err, res) {",
									"           if (res.code == 200){",
									"               var tid = res.json().tid;",
									"               pm.collectionVariables.set(\"tid\", tid);",
									"               pm.environment.set(\"tid\", tid);",
									"        }",
									"       });",
									"  };"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validando status code de um cancelamento realizado com sucesso",
									"pm.test(\"Validação do status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Se apresentar o campo tid na resposta, o mesmo será armazenado na variável de ambiente {{tid}}",
									"var response = JSON.parse(responseBody);",
									"if (response.refundId !== undefined){",
									"    pm.collectionVariables.set(\"refund_id\", response.refundId);",
									"    pm.environment.set(\"refund_id\", response.refundId);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{pv}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"amount\": 2000,\n  \"urls\": [\n    {\n      \"kind\": \"callback\",\n      \"url\": \"https://cliente.callback.com.br\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/transactions/{{tid}}/refunds",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"transactions",
								"{{tid}}",
								"refunds"
							]
						},
						"description": "### Cancelar transação\n> Para autenticar na API, utilize os dados de PV e Token gerados na criação do projeto na área logada do [Portal do Desenvolvedor](https://developer.userede.com.br/login).\n\n#### Autenticação\nÉ possível configurar a autenticação no Postman de 2 maneiras:\n- **Opção 1:** Na aba `Authorization`, selecione o tipo \"Basic Auth\" e preencha os campos de Username e Password com PV e Token, respectivamente. **Este é o modo que está configurado na requisição.**\n\n- **Opção 2:** Adicione na aba `Headers` da requisição adicione o campo **Authorization** com o hash do PV e Token. <br> Exemplo para gerar o hash do token na aba `Pre-request Script`:\n```\nvar authBasicHash = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\npm.environment.set(\"hash_token\", \"Basic \" + authBasicHash);\n```\n\n#### Serviço\nRealiza o [cancelamento](https://developer.userede.com.br/e-rede#cancelamento) de uma venda. O mesmo pode ser solicitado para todas as transações.\n\nAlém disso, na aba `Tests` está sendo feito a validação do status code da requisição realizada com sucesso e está sendo armazenado o valor do refundId da resposta na váriavel {refund_id}.\n\n[Clique aqui](https://developer.userede.com.br/e-rede#swagger_operations-Cancelamento-cancelarTransacao) para acessar a documentação completa."
					},
					"response": []
				},
				{
					"name": "Consultar cancelamento por tid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validando status code para uma requisição de sucesso, com reference válido",
									"pm.test(\"Validação do status code\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{pv}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/v1/transactions/{{tid}}/refunds",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"transactions",
								"{{tid}}",
								"refunds"
							]
						},
						"description": "### Consultar cancelamento por tid\n> Para autenticar na API, utilize os dados de PV e Token gerados na criação do projeto na área logada do [Portal do Desenvolvedor](https://developer.userede.com.br/login).\n\n#### Autenticação\nÉ possível configurar a autenticação no Postman de 2 maneiras:\n- **Opção 1:** Na aba `Authorization`, selecione o tipo \"Basic Auth\" e preencha os campos de Username e Password com PV e Token, respectivamente. **Este é o modo que está configurado na requisição.**\n\n- **Opção 2:** Adicione na aba `Headers` da requisição adicione o campo **Authorization** com o hash do PV e Token. <br> Exemplo para gerar o hash do token na aba `Pre-request Script`:\n```\nvar authBasicHash = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\npm.environment.set(\"hash_token\", \"Basic \" + authBasicHash);\n```\n\n#### Serviço\n[Consulta do cancelamento](https://developer.userede.com.br/e-rede#consulta-cancelamento) a partir do ID da transação (tid). Lista todos os cancelamentos que foram realizados na transação.\n\nA variável de ambiente {tid} contém o ID da última transação feita em uma das requisições da pasta `Realizar transação`, desta forma a consulta das vendas fica mais simples.\n\nNa aba `Tests` é realizada a validação do status code da requisição realizada com sucesso.\n\n[Clique aqui](https://developer.userede.com.br/e-rede#swagger_operations-Cancelamento-consultarCancelamentoPorTid) para acessar a documentação completa."
					},
					"response": []
				},
				{
					"name": "Consultar cancelamento por refundId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validando status code para uma requisição de sucesso, com refundId e tid válidos de uma transação cancelada",
									"pm.test(\"Validação do status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{pv}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/v1/transactions/{{tid}}/refunds/{{refund_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"transactions",
								"{{tid}}",
								"refunds",
								"{{refund_id}}"
							]
						},
						"description": "### Consultar cancelamento por refundId\n> Para autenticar na API, utilize os dados de PV e Token gerados na criação do projeto na área logada do [Portal do Desenvolvedor](https://developer.userede.com.br/login).\n\n#### Autenticação\nÉ possível configurar a autenticação no Postman de 2 maneiras:\n- **Opção 1:** Na aba `Authorization`, selecione o tipo \"Basic Auth\" e preencha os campos de Username e Password com PV e Token, respectivamente. **Este é o modo que está configurado na requisição.**\n\n- **Opção 2:** Adicione na aba `Headers` da requisição adicione o campo **Authorization** com o hash do PV e Token. <br> Exemplo para gerar o hash do token na aba `Pre-request Script`:\n```\nvar authBasicHash = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\npm.environment.set(\"hash_token\", \"Basic \" + authBasicHash);\n```\n\n#### Serviço\n[Consulta do cancelamento](https://developer.userede.com.br/e-rede#consulta-cancelamento) a partir do número do cancelamento (refundId).\n\nA variável de ambiente {refundId} contém o código de retorno do cancelamento gerado pela Rede. Esse código é gerado pelo método POST `Cancelar transação`, dentro da pasta `Cancelamento`.\n\nNa aba `Tests` é realizada a validação do status code da requisição realizada com sucesso.\n\n[Clique aqui](https://developer-dev.userede.com.br/e-rede#swagger_operations-Cancelamento-consultarCancelamentoPorRefundId) para acessar a documentação completa."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Gerando valor randômico com data para a variável de ambiente {{reference}}",
							"var moment = require('moment');",
							"pm.environment.set(\"reference\", \"g\" + moment().format(\"DDMMYYHHmmssSSS\"));"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tokenização",
			"item": [
				{
					"name": "Errors",
					"item": [
						{
							"name": "01 - TokenizationId Required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '01'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"01\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'TokenizationId: Required parameter missing.'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"TokenizationId: Required parameter missing.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/ ",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										" "
									]
								}
							},
							"response": []
						},
						{
							"name": "02 - TokenizationId Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '02'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"02\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'TokenizationId: Invalid guid value.'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"TokenizationId: Invalid guid value.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/12312",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										"12312"
									]
								}
							},
							"response": []
						},
						{
							"name": "03 - TokenizationId doesnt exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '03'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"03\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'There is no data with the given guid.'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"There is no data with the given guid.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/e8d5f215-cccf-4c12-8fbb-e0b395fba752",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										"e8d5f215-cccf-4c12-8fbb-e0b395fba752"
									]
								}
							},
							"response": []
						},
						{
							"name": "04 - Email required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '04'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"04\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'Email: Required parameter missing'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"Email: Required parameter missing\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cardNumber\": \"4895370010000005\",\r\n    \"expirationMonth\": \"05\",\r\n    \"expirationYear\": \"2022\",\r\n    \"storageCard\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "05 - Email invalid size",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '05'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"05\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'Email: Invalid parameter size'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"Email: Invalid parameter size\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"john_snow@dominiodominiodominiodominiodominiodominiodominiodominiodominiodominiodominiodominiodominiodominiodominiodominiodominiodominiodominiodominiodominiodominiodominiodominiodominiodominiodominio.com.br\",\r\n    \"cardNumber\": \"4895370010000005\",\r\n    \"expirationMonth\": \"05\",\r\n    \"expirationYear\": \"2022\",\r\n    \"storageCard\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "06 - Email invalid format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '06'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"06\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'Email: Invalid parameter format'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"Email: Invalid parameter format\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"john_snow.com.br\",\r\n    \"cardNumber\": \"4895370010000005\",\r\n    \"expirationMonth\": \"05\",\r\n    \"expirationYear\": \"2022\",\r\n    \"storageCard\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "07 - CardNumber required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '07'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"07\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'CardNumber: Required parameter missing'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"CardNumber: Required parameter missing\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"john_snow@dominio.com.br\",\r\n    \"expirationMonth\": \"{{current_month}}\",\r\n    \"expirationYear\": \"{{current_year}}\",\r\n    \"storageCard\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "08 - CardNumber invalid size",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '08'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"08\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'CardNumber: Invalid parameter size'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"CardNumber: Invalid parameter size\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"john_snow@dominio.com.br\",\r\n    \"cardNumber\": \"12345678901234567890\",\r\n    \"expirationMonth\": \"{{current_month}}\",\r\n    \"expirationYear\": \"{{current_year}}\",\r\n    \"storageCard\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "09 - CardNumber invalid format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '09'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"09\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'CardNumber: Invalid parameter format'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"CardNumber: Invalid parameter format\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"john_snow@dominio.com.br\",\r\n    \"cardNumber\": \"123456789#######\",\r\n    \"expirationMonth\": \"{{current_month}}\",\r\n    \"expirationYear\": \"{{current_year}}\",\r\n    \"storageCard\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "10 - ExpirationMonth required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '10'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"10\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'ExpirationMonth: Required parameter missing'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"ExpirationMonth: Required parameter missing\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"john_snow@dominio.com.br\",\r\n    \"cardNumber\": \"4895370010000005\",\r\n    \"expirationYear\": \"2022\",\r\n    \"storageCard\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "11 - ExpirationMonth invalid value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '11'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"11\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'ExpirationMonth: Invalid parameter value'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"ExpirationMonth: Invalid parameter value\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"john_snow@dominio.com.br\",\r\n    \"expirationMonth\": \"13\",\r\n    \"cardNumber\": \"4895370010000005\",\r\n    \"expirationYear\": \"2022\",\r\n    \"storageCard\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "12 - ExpirationMonth invalid format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '12'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"12\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'ExpirationMonth: Invalid parameter format'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"ExpirationMonth: Invalid parameter format\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"john_snow@dominio.com.br\",\r\n    \"expirationMonth\": \"13##\",\r\n    \"cardNumber\": \"4895370010000005\",\r\n    \"expirationYear\": \"2022\",\r\n    \"storageCard\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "13 - ExpirationYear required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '13'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"13\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'ExpirationYear: Required parameter missing'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"ExpirationYear: Required parameter missing\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"john_snow@dominio.com.br\",\r\n    \"cardNumber\": \"4895370010000005\",\r\n    \"expirationMonth\": \"02\",\r\n    \"storageCard\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "14 - ExpirationYear invalid size",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '14'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"14\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'ExpirationYear: Invalid parameter size'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"ExpirationYear: Invalid parameter size\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"john_snow@dominio.com.br\",\r\n    \"cardNumber\": \"4895370010000005\",\r\n    \"expirationMonth\": \"02\",\r\n    \"expirationYear\": \"02022\",\r\n    \"storageCard\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "15 - ExpirationYear invalid format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '15'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"15\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'ExpirationYear: Invalid parameter format'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"ExpirationYear: Invalid parameter format\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"john_snow@dominio.com.br\",\r\n    \"cardNumber\": \"4895370010000005\",\r\n    \"expirationMonth\": \"02\",\r\n    \"expirationYear\": \"2@22\",\r\n    \"storageCard\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "17 - CardholderName invalid size",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '17'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"17\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'CardholderName: Invalid parameter size'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"CardholderName: Invalid parameter size\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"john_snow@dominio.com.br\",\r\n    \"cardNumber\": \"4895370010000005\",\r\n    \"expirationMonth\": \"{{current_month}}\",\r\n    \"expirationYear\": \"{{current_year}}\",\r\n    \"cardholderName\": \"John Snow John Snow John Snow John Snow John Snow John Snow John Snow John Snow John Snow John Snow John Snow John Snow John Snow John Snow John Snow John Snow John Snow John Snow John Snow John Snow John Snow\",\r\n    \"storageCard\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "18 - CardholderName invalid format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '18'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"18\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'CardholderName: Invalid parameter format'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"CardholderName: Invalid parameter format\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"john_snow@dominio.com.br\",\r\n    \"cardNumber\": \"4895370010000005\",\r\n    \"expirationMonth\": \"{{current_month}}\",\r\n    \"expirationYear\": \"{{current_year}}\",\r\n    \"cardholderName\": 1234,\r\n    \"storageCard\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "19 - SecurityCode required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '19'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"19\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'SecurityCode: Invalid parameter size'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"SecurityCode: Required parameter missing\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"john_snow@dominio.com.br\",\r\n    \"cardNumber\": \"4895370010000005\",\r\n    \"expirationMonth\": \"{{current_month}}\",\r\n    \"expirationYear\": \"{{current_year}}\",\r\n    \"securityCode\": \"0\",\r\n    \"storageCard\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "20 - SecurityCode invalid size",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '20'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"20\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'SecurityCode: Invalid parameter size'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"SecurityCode: Invalid parameter size\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"john_snow@dominio.com.br\",\r\n    \"cardNumber\": \"4895370010000005\",\r\n    \"expirationMonth\": \"{{current_month}}\",\r\n    \"expirationYear\": \"{{current_year}}\",\r\n    \"securityCode\": \"12345\",\r\n    \"storageCard\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "21 - SecurityCode invalid format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '21'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"21\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'SecurityCode: Invalid parameter format'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"SecurityCode: Invalid parameter format\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"john_snow@dominio.com.br\",\r\n    \"cardNumber\": \"4895370010000005\",\r\n    \"expirationMonth\": \"{{current_month}}\",\r\n    \"expirationYear\": \"{{current_year}}\",\r\n    \"securityCode\": \"1@23\",\r\n    \"storageCard\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "22 - Expired Card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '22'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"22\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'Expired card.'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"Expired card.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"john_snow@dominio.com.br\",\r\n    \"cardNumber\": \"4895370010000005\",\r\n    \"expirationMonth\": \"04\",\r\n    \"expirationYear\": \"2022\",\r\n    \"cardholderName\": \"John Snow\",\r\n    \"securityCode\": \"123\",\r\n    \"storageCard\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "23 - Service not enabled",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '23'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"23\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'Service not enabled for this establishment'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"Service not enabled for this establishment\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"john_snow@dominio.com.br\",\r\n    \"cardNumber\": \"0000000000000001\",\r\n    \"expirationMonth\": \"{{current_month}}\",\r\n    \"expirationYear\": \"{{current_year}}\",\r\n    \"cardholderName\": \"John Snow\",\r\n    \"securityCode\": \"123\",\r\n    \"storageCard\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "27 - Card not enabled",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '27'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"27\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'Card is from a brand not enabled for tokenization'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"Card is from a brand not enabled for tokenization\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"john_snow@dominio.com.br\",\r\n    \"cardNumber\": \"2223000250000004\",\r\n    \"expirationMonth\": \"{{current_month}}\",\r\n    \"expirationYear\": \"{{current_year}}\",\r\n    \"cardholderName\": \"John Snow\",\r\n    \"securityCode\": \"1234\",\r\n    \"storageCard\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "28 - Url required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '28'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"28\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'Url: Required parameter missing'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"Url: Required parameter missing\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"authorization\": {\r\n        \"type\": \"basic\",\r\n        \"token\": \"Basic aFGEfgsASDFeuAAhaoe=\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/seturl",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										"seturl"
									]
								}
							},
							"response": []
						},
						{
							"name": "29 - GUID_0001",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '29'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"29\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'Service temporarily unavailable'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"Service temporarily unavailable\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{urlToken}}/token-service/v1/cryptogram/guid_0001",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"cryptogram",
										"guid_0001"
									]
								}
							},
							"response": []
						},
						{
							"name": "30 - GUID_0002",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '30'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"30\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'Declined: This card is considered ineligible for tokenization at this moment'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"Declined: This card is considered ineligible for tokenization at this moment\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{urlToken}}/token-service/v1/cryptogram/guid_0002",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"cryptogram",
										"guid_0002"
									]
								}
							},
							"response": []
						},
						{
							"name": "31 - GUID_0003",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '31'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"31\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'NotAllowed: This card is considered ineligible for tokenization at this moment'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"NotAllowed: This card is considered ineligible for tokenization at this moment\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{urlToken}}/token-service/v1/cryptogram/guid_0003",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"cryptogram",
										"guid_0003"
									]
								}
							},
							"response": []
						},
						{
							"name": "32 - GUID_0004",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '32'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"32\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'TokenCryptogram unvailable. Check the token status'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"TokenCryptogram unvailable. Check the token status\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{urlToken}}/token-service/v1/cryptogram/guid_0004",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"cryptogram",
										"guid_0004"
									]
								}
							},
							"response": []
						},
						{
							"name": "00 - GUID_0005",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '00'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"00\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'Success'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"Success\");\r",
											"});\r",
											"\r",
											"pm.test(\"tokenizationId equal to 'GUID_0005'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.tokenizationId).to.eql(\"GUID_0005\");\r",
											"});\r",
											"\r",
											"pm.test(\"expirationDate is not returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    if (jsonData.cryptogramInfo.hasOwnProperty('expirationDate')){\r",
											"        pm.expect.fail('expirationDate is returned');\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{urlToken}}/token-service/v1/cryptogram/GUID_0005",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"cryptogram",
										"GUID_0005"
									]
								}
							},
							"response": []
						},
						{
							"name": "33 - Error 00000000000002",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"urlToken\");\r",
											"\r",
											"if (pm.environment.get(\"pv\") == undefined){\r",
											"    var hashToken = btoa(pm.collectionVariables.get(\"pv\") + \":\" + pm.collectionVariables.get(\"token\"));\r",
											"} else {\r",
											"    var hashToken = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\r",
											"}\r",
											"\r",
											"const options = {\r",
											"  url:  `${url}/token-service/v1/tokenization/`, \r",
											"  method: 'POST',\r",
											"  header: {\r",
											"    'Content-Type': 'application/json',\r",
											"    'Authorization': `Basic ${hashToken}`\r",
											"  },\r",
											"  body: { \r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"        \"email\": \"john_snow@gmail.com\",\r",
											"        \"cardNumber\": \"0000000000000002\",\r",
											"        \"expirationMonth\": `${pm.variables.get(\"current_month\")}`,\r",
											"        \"expirationYear\": `${pm.variables.get(\"current_year\")}`,\r",
											"        \"securityCode\": \"235\",\r",
											"        \"storageCard\": 0\r",
											"    })\r",
											"  }\r",
											"};\r",
											"\r",
											"runPreFunction(options);\r",
											"\r",
											"function runPreFunction(options){\r",
											"    pm.sendRequest(options, function (err, res) {\r",
											"    if(res.code == 201){\r",
											"        console.log(res.json().tokenizationId);\r",
											"        const tokenizationId = res.json().tokenizationId\r",
											"        pm.variables.set(\"tokenizationId\", tokenizationId);\r",
											"        pm.collectionVariables.set(\"tokenizationId\", tokenizationId);\r",
											"        pm.environment.set(\"tokenizationId\", tokenizationId);\r",
											"        \r",
											"        const options2 = {\r",
											"            url:  `${url}/token-service/v1/tokenization/callback/${pm.variables.get(\"tokenizationId\")}`, \r",
											"            method: 'PUT',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json',\r",
											"            }\r",
											"        }\r",
											"\r",
											"        pm.sendRequest(options2, function (err, resp) {\r",
											"            if(resp.code == 201){\r",
											"                console.log(\"Callback done\");\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"    });\r",
											"};\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"tokenizationStatus is 'Failed'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.tokenizationStatus).to.eql(\"Failed\");\r",
											"});\r",
											"\r",
											"pm.test(\"Brand return provisionDataExpired error\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.brand.message).to.eql(\"provisionDataExpired: The PAN information provided is considered stale.\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage is 'Failed'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"Failed\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnCoode is '33'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"33\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/{{tokenizationId}}",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										"{{tokenizationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "33 - Error 00000000000003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"urlToken\");\r",
											"\r",
											"if (pm.environment.get(\"pv\") == undefined){\r",
											"    var hashToken = btoa(pm.collectionVariables.get(\"pv\") + \":\" + pm.collectionVariables.get(\"token\"));\r",
											"} else {\r",
											"    var hashToken = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\r",
											"}\r",
											"\r",
											"\r",
											"const options = {\r",
											"  url:  `${url}/token-service/v1/tokenization/`, \r",
											"  method: 'POST',\r",
											"  header: {\r",
											"    'Content-Type': 'application/json',\r",
											"    'Authorization': `Basic ${hashToken}`\r",
											"  },\r",
											"  body: { \r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"        \"email\": \"john_snow@gmail.com\",\r",
											"        \"cardNumber\": \"0000000000000003\",\r",
											"        \"expirationMonth\": `${pm.variables.get(\"current_month\")}`,\r",
											"        \"expirationYear\": `${pm.variables.get(\"current_year\")}`,\r",
											"        \"securityCode\": \"235\",\r",
											"        \"storageCard\": 0\r",
											"    })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(options, function (err, res) {\r",
											"  if(res.code == 201){\r",
											"      console.log(res.json().tokenizationId);\r",
											"      const tokenizationId = res.json().tokenizationId\r",
											"      pm.variables.set(\"tokenizationId\", tokenizationId);\r",
											"\r",
											"      const options2 = {\r",
											"        url:  `${url}/token-service/v1/tokenization/callback/${pm.variables.get(\"tokenizationId\")}`, \r",
											"        method: 'PUT',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"        }\r",
											"      }\r",
											"\r",
											"      pm.sendRequest(options2, function (err, resp) {\r",
											"        if(resp.code == 201){\r",
											"            console.log(\"Callback done\");\r",
											"          }\r",
											"      });\r",
											"  }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"tokenizationStatus is 'Failed'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.tokenizationStatus).to.eql(\"Failed\");\r",
											"});\r",
											"\r",
											"pm.test(\"Brand return cardVerificationFailed error\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.brand.message).to.eql(\"cardVerificationFailed: Invalid field.\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage is 'Failed'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"Failed\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnCoode is '33'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"33\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/{{tokenizationId}}",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										"{{tokenizationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "33 - Error 00000000000004",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"urlToken\");\r",
											"\r",
											"if (pm.environment.get(\"pv\") == undefined){\r",
											"    var hashToken = btoa(pm.collectionVariables.get(\"pv\") + \":\" + pm.collectionVariables.get(\"token\"));\r",
											"} else {\r",
											"    var hashToken = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\r",
											"}\r",
											"\r",
											"const options = {\r",
											"  url:  `${url}/token-service/v1/tokenization/`, \r",
											"  method: 'POST',\r",
											"  header: {\r",
											"    'Content-Type': 'application/json',\r",
											"    'Authorization': `Basic ${hashToken}`\r",
											"  },\r",
											"  body: { \r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"        \"email\": \"john_snow@gmail.com\",\r",
											"        \"cardNumber\": \"0000000000000004\",\r",
											"        \"expirationMonth\": `${pm.variables.get(\"current_month\")}`,\r",
											"        \"expirationYear\": `${pm.variables.get(\"current_year\")}`,\r",
											"        \"securityCode\": \"235\",\r",
											"        \"storageCard\": 0\r",
											"    })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(options, function (err, res) {\r",
											"  if(res.code == 201){\r",
											"      console.log(res.json().tokenizationId);\r",
											"      const tokenizationId = res.json().tokenizationId\r",
											"      pm.variables.set(\"tokenizationId\", tokenizationId);\r",
											"\r",
											"      const options2 = {\r",
											"        url:  `${url}/token-service/v1/tokenization/callback/${pm.variables.get(\"tokenizationId\")}`, \r",
											"        method: 'PUT',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"        }\r",
											"      }\r",
											"\r",
											"      pm.sendRequest(options2, function (err, resp) {\r",
											"        if(resp.code == 201){\r",
											"            console.log(\"Callback done\");\r",
											"          }\r",
											"      });\r",
											"  }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"tokenizationStatus is 'Failed'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.tokenizationStatus).to.eql(\"Failed\");\r",
											"});\r",
											"\r",
											"pm.test(\"Brand return cardNotEligible error\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.brand.message).to.eql(\"cardNotEligible: This card cannot be used for tokenization at this moment.\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage is 'Failed'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"Failed\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnCoode is '33'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"33\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/{{tokenizationId}}",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										"{{tokenizationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "33 - Error 00000000000005",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"urlToken\");\r",
											"\r",
											"if (pm.environment.get(\"pv\") == undefined){\r",
											"    var hashToken = btoa(pm.collectionVariables.get(\"pv\") + \":\" + pm.collectionVariables.get(\"token\"));\r",
											"} else {\r",
											"    var hashToken = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\r",
											"}\r",
											"\r",
											"const options = {\r",
											"  url:  `${url}/token-service/v1/tokenization/`, \r",
											"  method: 'POST',\r",
											"  header: {\r",
											"    'Content-Type': 'application/json',\r",
											"    'Authorization': `Basic ${hashToken}`\r",
											"  },\r",
											"  body: { \r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"        \"email\": \"john_snow@gmail.com\",\r",
											"        \"cardNumber\": \"0000000000000005\",\r",
											"        \"expirationMonth\": `${pm.variables.get(\"current_month\")}`,\r",
											"        \"expirationYear\": `${pm.variables.get(\"current_year\")}`,\r",
											"        \"securityCode\": \"235\",\r",
											"        \"storageCard\": 0\r",
											"    })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(options, function (err, res) {\r",
											"  if(res.code == 201){\r",
											"      console.log(res.json().tokenizationId);\r",
											"      const tokenizationId = res.json().tokenizationId\r",
											"      pm.variables.set(\"tokenizationId\", tokenizationId);\r",
											"\r",
											"      const options2 = {\r",
											"        url:  `${url}/token-service/v1/tokenization/callback/${pm.variables.get(\"tokenizationId\")}`, \r",
											"        method: 'PUT',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"        }\r",
											"      }\r",
											"\r",
											"      pm.sendRequest(options2, function (err, resp) {\r",
											"        if(resp.code == 201){\r",
											"            console.log(\"Callback done\");\r",
											"          }\r",
											"      });\r",
											"  }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"tokenizationStatus is 'Failed'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.tokenizationStatus).to.eql(\"Failed\");\r",
											"});\r",
											"\r",
											"pm.test(\"Brand return cardNotAllowed error\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.brand.message).to.eql(\"cardNotAllowed: The requested action is not allowed for a given PAN.\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage is 'Failed'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"Failed\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnCoode is '33'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"33\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/{{tokenizationId}}",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										"{{tokenizationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "33 - Error 00000000000006",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"urlToken\");\r",
											"\r",
											"if (pm.environment.get(\"pv\") == undefined){\r",
											"    var hashToken = btoa(pm.collectionVariables.get(\"pv\") + \":\" + pm.collectionVariables.get(\"token\"));\r",
											"} else {\r",
											"    var hashToken = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\r",
											"}\r",
											"\r",
											"const options = {\r",
											"  url:  `${url}/token-service/v1/tokenization/`, \r",
											"  method: 'POST',\r",
											"  header: {\r",
											"    'Content-Type': 'application/json',\r",
											"    'Authorization': `Basic ${hashToken}`\r",
											"  },\r",
											"  body: { \r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"        \"email\": \"john_snow@gmail.com\",\r",
											"        \"cardNumber\": \"0000000000000006\",\r",
											"        \"expirationMonth\": `${pm.variables.get(\"current_month\")}`,\r",
											"        \"expirationYear\": `${pm.variables.get(\"current_year\")}`,\r",
											"        \"securityCode\": \"235\",\r",
											"        \"storageCard\": 0\r",
											"    })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(options, function (err, res) {\r",
											"  if(res.code == 201){\r",
											"      console.log(res.json().tokenizationId);\r",
											"      const tokenizationId = res.json().tokenizationId\r",
											"      pm.variables.set(\"tokenizationId\", tokenizationId);\r",
											"\r",
											"      const options2 = {\r",
											"        url:  `${url}/token-service/v1/tokenization/callback/${pm.variables.get(\"tokenizationId\")}`, \r",
											"        method: 'PUT',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"        }\r",
											"      }\r",
											"\r",
											"      pm.sendRequest(options2, function (err, resp) {\r",
											"        if(resp.code == 201){\r",
											"            console.log(\"Callback done\");\r",
											"          }\r",
											"      });\r",
											"  }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"tokenizationStatus is 'Failed'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.tokenizationStatus).to.eql(\"Failed\");\r",
											"});\r",
											"\r",
											"pm.test(\"Brand return declined error\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.brand.message).to.eql(\"declined: This card is considered not eligible for tokenization at this time.\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage is 'Failed'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"Failed\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnCoode is '33'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"33\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/{{tokenizationId}}",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										"{{tokenizationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "33 - Error 00000000000007",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"urlToken\");\r",
											"\r",
											"if (pm.environment.get(\"pv\") == undefined){\r",
											"    var hashToken = btoa(pm.collectionVariables.get(\"pv\") + \":\" + pm.collectionVariables.get(\"token\"));\r",
											"} else {\r",
											"    var hashToken = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\r",
											"}\r",
											"\r",
											"const options = {\r",
											"  url:  `${url}/token-service/v1/tokenization/`, \r",
											"  method: 'POST',\r",
											"  header: {\r",
											"    'Content-Type': 'application/json',\r",
											"    'Authorization': `Basic ${hashToken}`\r",
											"  },\r",
											"  body: { \r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"        \"email\": \"john_snow@gmail.com\",\r",
											"        \"cardNumber\": \"0000000000000007\",\r",
											"        \"expirationMonth\": `${pm.variables.get(\"current_month\")}`,\r",
											"        \"expirationYear\": `${pm.variables.get(\"current_year\")}`,\r",
											"        \"securityCode\": \"235\",\r",
											"        \"storageCard\": 0\r",
											"    })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(options, function (err, res) {\r",
											"  if(res.code == 201){\r",
											"      console.log(res.json().tokenizationId);\r",
											"      const tokenizationId = res.json().tokenizationId\r",
											"      pm.variables.set(\"tokenizationId\", tokenizationId);\r",
											"\r",
											"      const options2 = {\r",
											"        url:  `${url}/token-service/v1/tokenization/callback/${pm.variables.get(\"tokenizationId\")}`, \r",
											"        method: 'PUT',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"        }\r",
											"      }\r",
											"\r",
											"      pm.sendRequest(options2, function (err, resp) {\r",
											"        if(resp.code == 201){\r",
											"            console.log(\"Callback done\");\r",
											"          }\r",
											"      });\r",
											"  }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"tokenizationStatus is 'Failed'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.tokenizationStatus).to.eql(\"Failed\");\r",
											"});\r",
											"\r",
											"pm.test(\"Brand return notAllowed error\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.brand.message).to.eql(\"notAllowed: Further operations for this card are no longer allowed. Contact your bank to resolve this issue.\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage is 'Failed'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"Failed\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnCoode is '33'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"33\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/{{tokenizationId}}",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										"{{tokenizationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "34 - Authorization Token required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '34'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"34\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'Authorization Token: Required parameter missing'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"Authorization Token: Required parameter missing\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"url\": \"cname.seudominio.com.br\",\r\n    \"authorization\": {\r\n        \"type\": \"basic\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/seturl",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										"seturl"
									]
								}
							},
							"response": []
						},
						{
							"name": "35 - Authorization Token invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '35'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"35\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'Authorization Token: Invalid parameter format'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"Authorization Token: Invalid parameter format\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"url\": \"cname.seudominio.com.br\",\r\n    \"authorization\": {\r\n        \"type\": \"basic\",\r\n        \"token\": 1234\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/seturl",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										"seturl"
									]
								}
							},
							"response": []
						},
						{
							"name": "36 - Authorization Type required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '36'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"36\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'Authorization Type: Required parameter missing'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"Authorization Type: Required parameter missing\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"url\": \"cname.seudominio.com.br\",\r\n    \"authorization\": {\r\n        \"token\": \"Basic aFGEfgsASDFeuAAhaoe=\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/seturl",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										"seturl"
									]
								}
							},
							"response": []
						},
						{
							"name": "37 - Authorization Type invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '37'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"37\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'Authorization Type: Invalid parameter format'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"Authorization Type: Invalid parameter format\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"url\": \"cname.seudominio.com.br\",\r\n    \"authorization\": {\r\n        \"type\": \"oauth\",\r\n        \"token\": \"Basic aFGEfgsASDFeuAAhaoe=\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/seturl",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										"seturl"
									]
								}
							},
							"response": []
						},
						{
							"name": "45 - StorageCard required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '45'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"45\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'storageCard: Required parameter missing'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"storageCard: Required parameter missing\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"john_snow@gmail.com\",\r\n    \"cardNumber\": \"4895370010000005\",\r\n    \"expirationMonth\": \"{{current_month}}\",\r\n    \"expirationYear\": \"{{current_year}}\",\r\n    \"cardholderName\": \"John Snow\",\r\n    \"securityCode\": \"235\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "46 - StorageCard invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '46'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"46\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'storageCard: Invalid parameter format'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"storageCard: Invalid parameter format\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"john_snow@gmail.com\",\r\n    \"cardNumber\": \"4895370010000005\",\r\n    \"expirationMonth\": \"{{current_month}}\",\r\n    \"expirationYear\": \"{{current_year}}\",\r\n    \"cardholderName\": \"John Snow\",\r\n    \"securityCode\": \"235\",\r\n    \"storageCard\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "47 - Subscription invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"returnCode equal to '47'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnCode).to.eql(\"47\");\r",
											"});\r",
											"\r",
											"pm.test(\"returnMessage equal to 'storageCard: Invalid parameter format''\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.returnMessage).to.eql(\"subscription: Invalid parameter format\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"urlToken\");\r",
											"\r",
											"if (pm.environment.get(\"pv\") == undefined){\r",
											"    var hashToken = btoa(pm.collectionVariables.get(\"pv\") + \":\" + pm.collectionVariables.get(\"token\"));\r",
											"} else {\r",
											"    var hashToken = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\r",
											"}\r",
											"\r",
											"const options = {\r",
											"    url: `${url}/token-service/v1/tokenization/`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `Basic ${hashToken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": \"john_snow@gmail.com\",\r",
											"            \"cardNumber\": \"4895370010000005\",\r",
											"            \"expirationMonth\": `${pm.variables.get(\"current_month\")}`,\r",
											"            \"expirationYear\": `${pm.variables.get(\"current_year\")}`,\r",
											"            \"securityCode\": \"235\",\r",
											"            \"storageCard\": 2\r",
											"        })\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(options, function (err, res) {\r",
											"    if (res.code == 201) {\r",
											"        console.log(res.json().tokenizationId);\r",
											"        pm.variables.set(\"tokenizationId\", res.json().tokenizationId);\r",
											"\r",
											"        const options2 = {\r",
											"            url: `${url}/token-service/v1/tokenization/callback/${pm.variables.get(\"tokenizationId\")}`,\r",
											"            method: 'PUT',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json',\r",
											"            }\r",
											"        }\r",
											"\r",
											"        pm.sendRequest(options2, function (err, resp) {\r",
											"            if (resp.code == 201) {\r",
											"                console.log(\"Callback done\");\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscription\": \"verdadeiro\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlToken}}/token-service/v1/cryptogram/{{tokenizationId}}",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"cryptogram",
										"{{tokenizationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Status Inactive - cardNumber 0008",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"urlToken\");\r",
											"\r",
											"if (pm.environment.get(\"pv\") == undefined){\r",
											"    var hashToken = btoa(pm.collectionVariables.get(\"pv\") + \":\" + pm.collectionVariables.get(\"token\"));\r",
											"} else {\r",
											"    var hashToken = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\r",
											"}\r",
											"\r",
											"const options = {\r",
											"  url:  `${url}/token-service/v1/tokenization/`, \r",
											"  method: 'POST',\r",
											"  header: {\r",
											"    'Content-Type': 'application/json',\r",
											"    'Authorization': `Basic ${hashToken}`\r",
											"  },\r",
											"  body: { \r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"        \"email\": \"john_snow@gmail.com\",\r",
											"        \"cardNumber\": \"0000000000000008\",\r",
											"        \"expirationMonth\": `${pm.variables.get(\"current_month\")}`,\r",
											"        \"expirationYear\": `${pm.variables.get(\"current_year\")}`,\r",
											"        \"securityCode\": \"235\",\r",
											"        \"storageCard\": 2\r",
											"    })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(options, function (err, res) {\r",
											"  if(res.code == 201){\r",
											"      console.log(res.json().tokenizationId);\r",
											"      const tokenizationId = res.json().tokenizationId\r",
											"      pm.variables.set(\"tokenizationId\", tokenizationId);\r",
											"\r",
											"      const options2 = {\r",
											"        url:  `${url}/token-service/v1/tokenization/callback/${pm.variables.get(\"tokenizationId\")}`, \r",
											"        method: 'PUT',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"        }\r",
											"      }\r",
											"\r",
											"      pm.sendRequest(options2, function (err, resp) {\r",
											"        if(resp.code == 201){\r",
											"            console.log(\"Callback done\");\r",
											"          }\r",
											"      });\r",
											"  }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"tokenizationStatus is 'Inactive'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.tokenizationStatus).to.eql(\"Inactive\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/{{tokenizationId}}",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										"{{tokenizationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Status Suspended - cardNumber 0009",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"urlToken\");\r",
											"\r",
											"if (pm.environment.get(\"pv\") == undefined){\r",
											"    var hashToken = btoa(pm.collectionVariables.get(\"pv\") + \":\" + pm.collectionVariables.get(\"token\"));\r",
											"} else {\r",
											"    var hashToken = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\r",
											"}\r",
											"\r",
											"const options = {\r",
											"  url:  `${url}/token-service/v1/tokenization/`, \r",
											"  method: 'POST',\r",
											"  header: {\r",
											"    'Content-Type': 'application/json',\r",
											"    'Authorization': `Basic ${hashToken}`\r",
											"  },\r",
											"  body: { \r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"        \"email\": \"john_snow@gmail.com\",\r",
											"        \"cardNumber\": \"0000000000000009\",\r",
											"        \"expirationMonth\": `${pm.variables.get(\"current_month\")}`,\r",
											"        \"expirationYear\": `${pm.variables.get(\"current_year\")}`,\r",
											"        \"securityCode\": \"235\",\r",
											"        \"storageCard\": 2\r",
											"    })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(options, function (err, res) {\r",
											"  if(res.code == 201){\r",
											"      console.log(res.json().tokenizationId);\r",
											"      const tokenizationId = res.json().tokenizationId\r",
											"      pm.variables.set(\"tokenizationId\", tokenizationId);\r",
											"\r",
											"      const options2 = {\r",
											"        url:  `${url}/token-service/v1/tokenization/callback/${pm.variables.get(\"tokenizationId\")}`, \r",
											"        method: 'PUT',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"        }\r",
											"      }\r",
											"\r",
											"      pm.sendRequest(options2, function (err, resp) {\r",
											"        if(resp.code == 201){\r",
											"            console.log(\"Callback done\");\r",
											"          }\r",
											"      });\r",
											"  }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"tokenizationStatus is 'Suspended'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.tokenizationStatus).to.eql(\"Suspended\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/{{tokenizationId}}",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										"{{tokenizationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Status Deleted - cardNumber 0010",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var url = pm.variables.get(\"urlToken\");\r",
											"\r",
											"if (pm.environment.get(\"pv\") == undefined){\r",
											"    var hashToken = btoa(pm.collectionVariables.get(\"pv\") + \":\" + pm.collectionVariables.get(\"token\"));\r",
											"} else {\r",
											"    var hashToken = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\r",
											"}\r",
											"\r",
											"const options = {\r",
											"  url:  `${url}/token-service/v1/tokenization/`, \r",
											"  method: 'POST',\r",
											"  header: {\r",
											"    'Content-Type': 'application/json',\r",
											"    'Authorization': `Basic ${hashToken}`\r",
											"  },\r",
											"  body: { \r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"        \"email\": \"john_snow@gmail.com\",\r",
											"        \"cardNumber\": \"0000000000000010\",\r",
											"        \"expirationMonth\": `${pm.variables.get(\"current_month\")}`,\r",
											"        \"expirationYear\": `${pm.variables.get(\"current_year\")}`,\r",
											"        \"securityCode\": \"235\",\r",
											"        \"storageCard\": 2\r",
											"    })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(options, function (err, res) {\r",
											"  if(res.code == 201){\r",
											"      console.log(res.json().tokenizationId);\r",
											"      const tokenizationId = res.json().tokenizationId\r",
											"      pm.variables.set(\"tokenizationId\", tokenizationId);\r",
											"\r",
											"      const options2 = {\r",
											"        url:  `${url}/token-service/v1/tokenization/callback/${pm.variables.get(\"tokenizationId\")}`, \r",
											"        method: 'PUT',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"        }\r",
											"      }\r",
											"\r",
											"      pm.sendRequest(options2, function (err, resp) {\r",
											"        if(resp.code == 201){\r",
											"            console.log(\"Callback done\");\r",
											"          }\r",
											"      });\r",
											"  }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"tokenizationStatus is 'Deleted'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.tokenizationStatus).to.eql(\"Deleted\");\r",
											"});\r",
											"\r",
											"pm.test(\"Token inexists\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    if (!jsonData.hasOwnProperty('token')){\r",
											"        pm.expect(!jsonData.hasOwnProperty('token')).to.equal(true);\r",
											"    } else {\r",
											"        pm.expect.fail('Token is present');\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{pv}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlToken}}/token-service/v1/tokenization/{{tokenizationId}}",
									"host": [
										"{{urlToken}}"
									],
									"path": [
										"token-service",
										"v1",
										"tokenization",
										"{{tokenizationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Enviar solicitação de tokenização",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"returnCode equal to '00'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.returnCode).to.eql(\"00\");\r",
									"});\r",
									"\r",
									"pm.test(\"returnMessage equal to 'Success'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.returnMessage).to.eql(\"Success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"tokenizatioId was returned\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect('tokenizationId' in jsonData);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{pv}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"john_snow@gmail.com\",\r\n  \"cardNumber\": \"4895370010000005\",\r\n  \"expirationMonth\": \"{{current_month}}\",\r\n  \"expirationYear\": \"{{current_year}}\",\r\n  \"cardholderName\": \"John Snow\",\r\n  \"securityCode\": \"235\",\r\n  \"storageCard\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{urlToken}}/token-service/v1/tokenization/",
							"host": [
								"{{urlToken}}"
							],
							"path": [
								"token-service",
								"v1",
								"tokenization",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Consultar solicitação de tokenização",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"returnCode equal to '00'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.returnCode).to.eql(\"00\");\r",
									"});\r",
									"\r",
									"pm.test(\"returnMessage equal to 'Success'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.returnMessage).to.eql(\"Success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var url = pm.variables.get(\"urlToken\");\r",
									"\r",
									"if (pm.environment.get(\"pv\") == undefined){\r",
									"    var hashToken = btoa(pm.collectionVariables.get(\"pv\") + \":\" + pm.collectionVariables.get(\"token\"));\r",
									"} else {\r",
									"    var hashToken = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\r",
									"}\r",
									"\r",
									"const options = {\r",
									"  url:  `${url}/token-service/v1/tokenization/`, \r",
									"  method: 'POST',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': `Basic ${hashToken}`\r",
									"  },\r",
									"  body: { \r",
									"    mode: 'raw',\r",
									"    raw:JSON.stringify({\r",
									"        \"email\": \"john_snow@gmail.com\",\r",
									"        \"cardNumber\": \"4895370010000005\",\r",
									"        \"expirationMonth\": `${pm.variables.get(\"current_month\")}`,\r",
									"        \"expirationYear\": `${pm.variables.get(\"current_year\")}`,\r",
									"        \"securityCode\": \"235\",\r",
									"        \"storageCard\": 2\r",
									"    })\r",
									"  }\r",
									"};\r",
									"\r",
									"pm.sendRequest(options, function (err, res) {\r",
									"  if(res.code == 201){\r",
									"      console.log(res.json().tokenizationId);\r",
									"      pm.variables.set(\"tokenizationId\", res.json().tokenizationId);\r",
									"\r",
									"      const options2 = {\r",
									"        url:  `${url}/token-service/v1/tokenization/callback/${pm.variables.get(\"tokenizationId\")}`, \r",
									"        method: 'PUT',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"        }\r",
									"      }\r",
									"\r",
									"      pm.sendRequest(options2, function (err, resp) {\r",
									"        if(resp.code == 201){\r",
									"            console.log(\"Callback done\");\r",
									"          }\r",
									"      });\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{pv}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{urlToken}}/token-service/v1/tokenization/{{tokenizationId}}",
							"host": [
								"{{urlToken}}"
							],
							"path": [
								"token-service",
								"v1",
								"tokenization",
								"{{tokenizationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enviar token cryptogram",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"returnCode equal to '00'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.returnCode).to.eql(\"00\");\r",
									"});\r",
									"\r",
									"pm.test(\"returnMessage equal to 'Success'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.returnMessage).to.eql(\"Success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var url = pm.variables.get(\"urlToken\");\r",
									"\r",
									"if (pm.environment.get(\"pv\") == undefined){\r",
									"    var hashToken = btoa(pm.collectionVariables.get(\"pv\") + \":\" + pm.collectionVariables.get(\"token\"));\r",
									"} else {\r",
									"    var hashToken = btoa(pm.environment.get(\"pv\") + \":\" + pm.environment.get(\"token\"));\r",
									"}\r",
									"\r",
									"const options = {\r",
									"  url:  `${url}/token-service/v1/tokenization/`, \r",
									"  method: 'POST',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': `Basic ${hashToken}`\r",
									"  },\r",
									"  body: { \r",
									"    mode: 'raw',\r",
									"    raw:JSON.stringify({\r",
									"        \"email\": \"john_snow@gmail.com\",\r",
									"        \"cardNumber\": \"4895370010000005\",\r",
									"        \"expirationMonth\": `${pm.variables.get(\"current_month\")}`,\r",
									"        \"expirationYear\": `${pm.variables.get(\"current_year\")}`,\r",
									"        \"securityCode\": \"235\",\r",
									"        \"storageCard\": 2\r",
									"    })\r",
									"  }\r",
									"};\r",
									"\r",
									"pm.sendRequest(options, function (err, res) {\r",
									"  if(res.code == 201){\r",
									"      console.log(res.json().tokenizationId);\r",
									"      pm.variables.set(\"tokenizationId\", res.json().tokenizationId);\r",
									"\r",
									"      const options2 = {\r",
									"        url:  `${url}/token-service/v1/tokenization/callback/${pm.variables.get(\"tokenizationId\")}`, \r",
									"        method: 'PUT',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"        }\r",
									"      }\r",
									"\r",
									"      pm.sendRequest(options2, function (err, resp) {\r",
									"        if(resp.code == 201){\r",
									"            console.log(\"Callback done\");\r",
									"          }\r",
									"      });\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{pv}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"subscription\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{urlToken}}/token-service/v1/cryptogram/{{tokenizationId}}",
							"host": [
								"{{urlToken}}"
							],
							"path": [
								"token-service",
								"v1",
								"cryptogram",
								"{{tokenizationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastrar endpoint para envio de callback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"returnCode equal to '00'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.returnCode).to.eql(\"00\");\r",
									"});\r",
									"\r",
									"pm.test(\"returnMessage equal to 'Success'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.returnMessage).to.eql(\"Success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{pv}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"url\": \"cname.seudominio.com.br\",\r\n    \"authorization\": {\r\n        \"type\": \"basic\",\r\n        \"token\": \"Basic aFGEfgsASDFeuAAhaoe=\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{urlToken}}/token-service/v1/tokenization/seturl",
							"host": [
								"{{urlToken}}"
							],
							"path": [
								"token-service",
								"v1",
								"tokenization",
								"seturl"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const moment = require('moment');",
					"pm.collectionVariables.set(\"current_month\", moment().format(\"MM\"));",
					"pm.collectionVariables.set(\"current_year\", moment().format(\"YYYY\"));"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://sandbox-erede.useredecloud.com.br"
		},
		{
			"key": "pv",
			"value": "<informe-pv>"
		},
		{
			"key": "token",
			"value": "<informe-token>"
		},
		{
			"key": "reference",
			"value": "g261121163305536"
		},
		{
			"key": "tid",
			"value": "10012111261732599560"
		},
		{
			"key": "refund_id",
			"value": "fd9138f1-e1dd-4fee-8964-e27348a63d57"
		},
		{
			"key": "autorizacao_amount",
			"value": "2000"
		},
		{
			"key": "autorizacao_tid",
			"value": "10012112021617588951"
		},
		{
			"key": "urlToken",
			"value": "https://rl7-sandbox-api.useredecloud.com.br"
		},
		{
			"key": "current_month",
			"value": ""
		},
		{
			"key": "current_year",
			"value": ""
		},
		{
			"key": "tokenizationId",
			"value": ""
		}
	]
}